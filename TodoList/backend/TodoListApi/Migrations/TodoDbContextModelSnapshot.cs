// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoListApi.Data;

#nullable disable

namespace TodoListApi.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    partial class TodoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.20");

            modelBuilder.Entity("TodoListApi.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TodoCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Color = "#3b82f6",
                            Description = "School and university related tasks",
                            Name = "Academic",
                            TodoCount = 0
                        },
                        new
                        {
                            Id = "2",
                            Color = "#10b981",
                            Description = "Personal life and household tasks",
                            Name = "Personal",
                            TodoCount = 0
                        },
                        new
                        {
                            Id = "3",
                            Color = "#f59e0b",
                            Description = "Professional and career related tasks",
                            Name = "Work",
                            TodoCount = 0
                        },
                        new
                        {
                            Id = "4",
                            Color = "#ef4444",
                            Description = "Health and fitness related activities",
                            Name = "Health",
                            TodoCount = 0
                        },
                        new
                        {
                            Id = "5",
                            Color = "#8b5cf6",
                            Description = "Learning and skill development",
                            Name = "Learning",
                            TodoCount = 0
                        });
                });

            modelBuilder.Entity("TodoListApi.Models.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TodoListApi.Models.Todo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Category = "Academic",
                            CreatedDate = new DateTime(2025, 10, 16, 13, 10, 37, 673, DateTimeKind.Utc).AddTicks(4435),
                            Description = "Write and submit the final project proposal for CSC436",
                            DueDate = new DateTime(2025, 10, 30, 13, 10, 37, 673, DateTimeKind.Utc).AddTicks(4441),
                            IsCompleted = false,
                            Priority = "High",
                            Tags = "[\"project\",\"academic\",\"deadline\"]",
                            Title = "Complete project proposal"
                        },
                        new
                        {
                            Id = "2",
                            Category = "Personal",
                            CreatedDate = new DateTime(2025, 10, 17, 13, 10, 37, 673, DateTimeKind.Utc).AddTicks(4459),
                            Description = "Buy groceries for the week including fruits and vegetables",
                            DueDate = new DateTime(2025, 10, 20, 13, 10, 37, 673, DateTimeKind.Utc).AddTicks(4460),
                            IsCompleted = true,
                            Priority = "Medium",
                            Tags = "[\"shopping\",\"food\",\"weekly\"]",
                            Title = "Grocery shopping"
                        },
                        new
                        {
                            Id = "3",
                            Category = "Work",
                            CreatedDate = new DateTime(2025, 10, 18, 13, 10, 37, 673, DateTimeKind.Utc).AddTicks(4465),
                            Description = "Prepare slides and agenda for the weekly team meeting",
                            DueDate = new DateTime(2025, 10, 23, 13, 10, 37, 673, DateTimeKind.Utc).AddTicks(4465),
                            IsCompleted = false,
                            Priority = "High",
                            Tags = "[\"meeting\",\"presentation\",\"team\"]",
                            Title = "Team meeting preparation"
                        },
                        new
                        {
                            Id = "4",
                            Category = "Health",
                            CreatedDate = new DateTime(2025, 10, 19, 13, 10, 37, 673, DateTimeKind.Utc).AddTicks(4470),
                            Description = "Complete 30-minute workout including cardio and strength training",
                            IsCompleted = false,
                            Priority = "Medium",
                            Tags = "[\"fitness\",\"health\",\"routine\"]",
                            Title = "Exercise routine"
                        },
                        new
                        {
                            Id = "5",
                            Category = "Learning",
                            CreatedDate = new DateTime(2025, 10, 19, 13, 10, 37, 673, DateTimeKind.Utc).AddTicks(4475),
                            Description = "Study advanced React patterns including Context API and custom hooks",
                            IsCompleted = false,
                            Priority = "Low",
                            Tags = "[\"learning\",\"react\",\"documentation\"]",
                            Title = "Read React documentation"
                        });
                });

            modelBuilder.Entity("TodoListApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Picture")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Provider", "ProviderUserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TodoListApi.Models.RefreshToken", b =>
                {
                    b.HasOne("TodoListApi.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoListApi.Models.Todo", b =>
                {
                    b.HasOne("TodoListApi.Models.User", "User")
                        .WithMany("Todos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoListApi.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
